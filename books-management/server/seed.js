const mongoose = require('mongoose');
require('dotenv').config();
const Book = require('./models/Book');

// H√†m random ng√†y
function randomDate(start, end) {
  return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
}

// T·∫°o danh s√°ch s√°ch gi·∫£
const books = Array.from({ length: 50 }, (_, i) => ({
  title: `ƒê·∫Øc Nh√¢n T√¢m - T·∫≠p ${i + 1}`,
  author: `Dale Carnegie`,
  price: Math.floor(Math.random() * 100000) + 50000,
  description: `S√°ch self-help s·ªë ${i + 1}, r·∫•t hay v√† ƒë√°ng ƒë·ªçc.`,
  publishedDate: randomDate(new Date(2000, 0, 1), new Date()),
  image: './uploads/Dacnhantam.jpg' // ho·∫∑c d√πng link ·∫£nh n·∫øu c√≥ Cloudinary
}));

// K·∫øt n·ªëi v√† ch√®n d·ªØ li·ªáu
mongoose.connect(process.env.MONGO_URL, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(async () => {
  console.log("‚úÖ ƒê√£ k·∫øt n·ªëi MongoDB");

  await Book.deleteMany(); // X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
  await Book.insertMany(books);
  console.log("üéâ ƒê√£ ch√®n th√†nh c√¥ng 50 quy·ªÉn s√°ch!");

  mongoose.disconnect();
})
.catch(err => {
  console.error("‚ùå L·ªói k·∫øt n·ªëi MongoDB:", err);
});
